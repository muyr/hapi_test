#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from HART import HART
from HART.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Result CookNodeDefault(NodeId node_id)')
    print('  Result IsInitialized()')
    print('  Result Initialize(CookOptions cook_options, bool use_cooking_thread, i32 cooking_thread_stack_size, string houdini_environment_files, string otl_search_path, string dso_search_path, string image_dso_search_path, string audio_dso_search_path)')
    print('  Result Cleanup()')
    print('  GetSessionEnvInt_Out GetSessionEnvInt(SessionEnvIntType int_type)')
    print('  GetServerEnvInt_Out GetServerEnvInt(string variable_name)')
    print('  GetServerEnvString_Out GetServerEnvString(string variable_name)')
    print('  GetServerEnvVarCount_Out GetServerEnvVarCount()')
    print('  GetServerEnvVarList_Out GetServerEnvVarList(i32 start, i32 length)')
    print('  Result SetServerEnvInt(string variable_name, i32 value)')
    print('  Result SetServerEnvString(string variable_name, string value)')
    print('  GetStatus_Out GetStatus(StatusType status_type)')
    print('  GetStatusStringBufLength_Out GetStatusStringBufLength(StatusType status_type, StatusVerbosity verbosity)')
    print('  GetStatusString_Out GetStatusString(StatusType status_type, i32 length)')
    print('  ComposeNodeCookResult_Out ComposeNodeCookResult(NodeId node_id, StatusVerbosity verbosity)')
    print('  GetComposedNodeCookResult_Out GetComposedNodeCookResult(i32 length)')
    print('  CheckForSpecificErrors_Out CheckForSpecificErrors(NodeId node_id, ErrorCodeBits errors_to_look_for)')
    print('  GetCookingTotalCount_Out GetCookingTotalCount()')
    print('  GetCookingCurrentCount_Out GetCookingCurrentCount()')
    print('  ConvertTransform_Out ConvertTransform(TransformEuler transform_in, RSTOrder rst_order, XYZOrder rot_order)')
    print('  ConvertMatrixToQuat_Out ConvertMatrixToQuat( matrix, RSTOrder rst_order)')
    print('  ConvertMatrixToEuler_Out ConvertMatrixToEuler( matrix, RSTOrder rst_order, XYZOrder rot_order)')
    print('  ConvertTransformQuatToMatrix_Out ConvertTransformQuatToMatrix(Transform transform)')
    print('  ConvertTransformEulerToMatrix_Out ConvertTransformEulerToMatrix(TransformEuler transform)')
    print('  Result PythonThreadInterpreterLock(bool locked)')
    print('  GetStringBufLength_Out GetStringBufLength(StringHandle string_handle)')
    print('  GetString_Out GetString(StringHandle string_handle, i32 length)')
    print('  SetCustomString_Out SetCustomString(string string_value)')
    print('  Result RemoveCustomString(i32 string_handle)')
    print('  GetStringBatchSize_Out GetStringBatchSize( string_handle_array)')
    print('  GetStringBatch_Out GetStringBatch(i32 char_array_length)')
    print('  GetTime_Out GetTime()')
    print('  Result SetTime(double time)')
    print('  GetUseHoudiniTime_Out GetUseHoudiniTime()')
    print('  Result SetUseHoudiniTime(bool enabled)')
    print('  GetTimelineOptions_Out GetTimelineOptions()')
    print('  Result SetTimelineOptions(TimelineOptions timeline_options)')
    print('  LoadAssetLibraryFromFile_Out LoadAssetLibraryFromFile(string file_path, bool allow_overwrite)')
    print('  LoadAssetLibraryFromMemory_Out LoadAssetLibraryFromMemory(string library_buffer, i32 library_buffer_length, bool allow_overwrite)')
    print('  GetAvailableAssetCount_Out GetAvailableAssetCount(AssetLibraryId library_id)')
    print('  GetAvailableAssets_Out GetAvailableAssets(AssetLibraryId library_id, i32 asset_count)')
    print('  GetAssetInfo_Out GetAssetInfo(NodeId node_id)')
    print('  GetAssetDefinitionParmCounts_Out GetAssetDefinitionParmCounts(AssetLibraryId library_id, string asset_name)')
    print('  GetAssetDefinitionParmInfos_Out GetAssetDefinitionParmInfos(AssetLibraryId library_id, string asset_name, i32 start, i32 length)')
    print('  GetAssetDefinitionParmValues_Out GetAssetDefinitionParmValues(AssetLibraryId library_id, string asset_name, i32 int_start, i32 int_length, i32 float_start, i32 float_length, bool string_evaluate, i32 string_start, i32 string_length, i32 choice_start, i32 choice_length)')
    print('  Result Interrupt()')
    print('  Result LoadHIPFile(string file_name, bool cook_on_load)')
    print('  Result SaveHIPFile(string file_path, bool lock_nodes)')
    print('  IsNodeValid_Out IsNodeValid(NodeId node_id, i32 unique_node_id)')
    print('  GetNodeInfo_Out GetNodeInfo(NodeId node_id)')
    print('  GetNodePath_Out GetNodePath(NodeId node_id, NodeId relative_to_node_id)')
    print('  GetManagerNodeId_Out GetManagerNodeId(NodeType node_type)')
    print('  ComposeChildNodeList_Out ComposeChildNodeList(NodeId parent_node_id, NodeTypeBits node_type_filter, NodeFlagsBits node_flags_filter, bool recursive)')
    print('  GetComposedChildNodeList_Out GetComposedChildNodeList(NodeId parent_node_id, i32 count)')
    print('  CreateNode_Out CreateNode(NodeId parent_node_id, string operator_name, string node_label, bool cook_on_creation)')
    print('  CreateInputNode_Out CreateInputNode(string name)')
    print('  CreateHeightfieldInputNode_Out CreateHeightfieldInputNode(NodeId parent_node_id, string name, i32 xsize, i32 ysize, double voxelsize)')
    print('  CreateHeightFieldInput_Out CreateHeightFieldInput(NodeId parent_node_id, string name, i32 xsize, i32 ysize, double voxelsize, HeightFieldSampling sampling)')
    print('  CreateHeightfieldInputVolumeNode_Out CreateHeightfieldInputVolumeNode(NodeId parent_node_id, string name, i32 xsize, i32 ysize, double voxelsize)')
    print('  Result CookNode(NodeId node_id, CookOptions cook_options)')
    print('  Result DeleteNode(NodeId node_id)')
    print('  Result RenameNode(NodeId node_id, string new_name)')
    print('  Result ConnectNodeInput(NodeId node_id, i32 input_index, NodeId node_id_to_connect, i32 output_index)')
    print('  Result DisconnectNodeInput(NodeId node_id, i32 input_index)')
    print('  QueryNodeInput_Out QueryNodeInput(NodeId node_to_query, i32 input_index)')
    print('  GetNodeInputName_Out GetNodeInputName(NodeId node_id, i32 input_idx)')
    print('  Result DisconnectNodeOutputsAt(NodeId node_id, i32 output_index)')
    print('  QueryNodeOutputConnectedCount_Out QueryNodeOutputConnectedCount(NodeId node_id, i32 output_idx, bool into_subnets, bool through_dots)')
    print('  QueryNodeOutputConnectedNodes_Out QueryNodeOutputConnectedNodes(NodeId node_id, i32 output_idx, bool into_subnets, bool through_dots, i32 start, i32 length)')
    print('  GetNodeOutputName_Out GetNodeOutputName(NodeId node_id, i32 output_idx)')
    print('  GetParameters_Out GetParameters(NodeId node_id, i32 start, i32 length)')
    print('  GetParmInfo_Out GetParmInfo(NodeId node_id, ParmId parm_id)')
    print('  GetParmIdFromName_Out GetParmIdFromName(NodeId node_id, string parm_name)')
    print('  GetParmInfoFromName_Out GetParmInfoFromName(NodeId node_id, string parm_name)')
    print('  GetParmTagName_Out GetParmTagName(NodeId node_id, ParmId parm_id, i32 tag_index)')
    print('  GetParmTagValue_Out GetParmTagValue(NodeId node_id, ParmId parm_id, string tag_name)')
    print('  ParmHasTag_Out ParmHasTag(NodeId node_id, ParmId parm_id, string tag_name)')
    print('  ParmHasExpression_Out ParmHasExpression(NodeId node_id, string parm_name, i32 index)')
    print('  GetParmWithTag_Out GetParmWithTag(NodeId node_id, string tag_name)')
    print('  GetParmExpression_Out GetParmExpression(NodeId node_id, string parm_name, i32 index)')
    print('  Result RevertParmToDefault(NodeId node_id, string parm_name, i32 index)')
    print('  Result RevertParmToDefaults(NodeId node_id, string parm_name)')
    print('  Result SetParmExpression(NodeId node_id, string value, ParmId parm_id, i32 index)')
    print('  Result RemoveParmExpression(NodeId node_id, ParmId parm_id, i32 index)')
    print('  GetParmIntValue_Out GetParmIntValue(NodeId node_id, string parm_name, i32 index)')
    print('  GetParmIntValues_Out GetParmIntValues(NodeId node_id, i32 start, i32 length)')
    print('  GetParmFloatValue_Out GetParmFloatValue(NodeId node_id, string parm_name, i32 index)')
    print('  GetParmFloatValues_Out GetParmFloatValues(NodeId node_id, i32 start, i32 length)')
    print('  GetParmStringValue_Out GetParmStringValue(NodeId node_id, string parm_name, i32 index, bool evaluate)')
    print('  GetParmStringValues_Out GetParmStringValues(NodeId node_id, bool evaluate, i32 start, i32 length)')
    print('  GetParmNodeValue_Out GetParmNodeValue(NodeId node_id, string parm_name)')
    print('  Result GetParmFile(NodeId node_id, string parm_name, string destination_directory, string destination_file_name)')
    print('  GetParmChoiceLists_Out GetParmChoiceLists(NodeId node_id, i32 start, i32 length)')
    print('  Result SetParmIntValue(NodeId node_id, string parm_name, i32 index, i32 value)')
    print('  Result SetParmIntValues(NodeId node_id,  values_array, i32 start)')
    print('  Result SetParmFloatValue(NodeId node_id, string parm_name, i32 index, double value)')
    print('  Result SetParmFloatValues(NodeId node_id,  values_array, i32 start)')
    print('  Result SetParmStringValue(NodeId node_id, string value, ParmId parm_id, i32 index)')
    print('  Result SetParmNodeValue(NodeId node_id, string parm_name, NodeId value)')
    print('  Result InsertMultiparmInstance(NodeId node_id, ParmId parm_id, i32 instance_position)')
    print('  Result RemoveMultiparmInstance(NodeId node_id, ParmId parm_id, i32 instance_position)')
    print('  GetHandleInfo_Out GetHandleInfo(NodeId node_id, i32 start, i32 length)')
    print('  GetHandleBindingInfo_Out GetHandleBindingInfo(NodeId node_id, i32 handle_index, i32 start, i32 length)')
    print('  GetPresetBufLength_Out GetPresetBufLength(NodeId node_id, PresetType preset_type, string preset_name)')
    print('  GetPreset_Out GetPreset(NodeId node_id, i32 buffer_length)')
    print('  Result SetPreset(NodeId node_id, PresetType preset_type, string preset_name, string buffer, i32 buffer_length)')
    print('  GetObjectInfo_Out GetObjectInfo(NodeId node_id)')
    print('  GetObjectTransform_Out GetObjectTransform(NodeId node_id, NodeId relative_to_node_id, RSTOrder rst_order)')
    print('  ComposeObjectList_Out ComposeObjectList(NodeId parent_node_id, string categories)')
    print('  GetComposedObjectList_Out GetComposedObjectList(NodeId parent_node_id, i32 start, i32 length)')
    print('  GetComposedObjectTransforms_Out GetComposedObjectTransforms(NodeId parent_node_id, RSTOrder rst_order, i32 start, i32 length)')
    print('  GetInstancedObjectIds_Out GetInstancedObjectIds(NodeId object_node_id, i32 start, i32 length)')
    print('  GetInstanceTransforms_Out GetInstanceTransforms(NodeId object_node_id, RSTOrder rst_order, i32 start, i32 length)')
    print('  GetInstanceTransformsOnPart_Out GetInstanceTransformsOnPart(NodeId node_id, PartId part_id, RSTOrder rst_order, i32 start, i32 length)')
    print('  Result SetObjectTransform(NodeId node_id, TransformEuler trans)')
    print('  GetDisplayGeoInfo_Out GetDisplayGeoInfo(NodeId object_node_id)')
    print('  GetGeoInfo_Out GetGeoInfo(NodeId node_id)')
    print('  GetPartInfo_Out GetPartInfo(NodeId node_id, PartId part_id)')
    print('  GetFaceCounts_Out GetFaceCounts(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  GetVertexList_Out GetVertexList(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  GetAttributeInfo_Out GetAttributeInfo(NodeId node_id, PartId part_id, string name, AttributeOwner owner)')
    print('  GetAttributeNames_Out GetAttributeNames(NodeId node_id, PartId part_id, AttributeOwner owner, i32 count)')
    print('  GetAttributeIntData_Out GetAttributeIntData(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info, i32 stride, i32 start, i32 length)')
    print('  GetAttributeInt64Data_Out GetAttributeInt64Data(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info, i32 stride, i32 start, i32 length)')
    print('  GetAttributeFloatData_Out GetAttributeFloatData(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info, i32 stride, i32 start, i32 length)')
    print('  GetAttributeFloat64Data_Out GetAttributeFloat64Data(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info, i32 stride, i32 start, i32 length)')
    print('  GetAttributeStringData_Out GetAttributeStringData(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info, i32 start, i32 length)')
    print('  GetGroupNames_Out GetGroupNames(NodeId node_id, GroupType group_type, i32 group_count)')
    print('  GetGroupMembership_Out GetGroupMembership(NodeId node_id, PartId part_id, GroupType group_type, string group_name, i32 start, i32 length)')
    print('  GetGroupCountOnPackedInstancePart_Out GetGroupCountOnPackedInstancePart(NodeId node_id, PartId part_id)')
    print('  GetGroupNamesOnPackedInstancePart_Out GetGroupNamesOnPackedInstancePart(NodeId node_id, PartId part_id, GroupType group_type, i32 group_count)')
    print('  GetGroupMembershipOnPackedInstancePart_Out GetGroupMembershipOnPackedInstancePart(NodeId node_id, PartId part_id, GroupType group_type, string group_name, i32 start, i32 length)')
    print('  GetInstancedPartIds_Out GetInstancedPartIds(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  GetInstancerPartTransforms_Out GetInstancerPartTransforms(NodeId node_id, PartId part_id, RSTOrder rst_order, i32 start, i32 length)')
    print('  Result SetPartInfo(NodeId node_id, PartId part_id, PartInfo part_info)')
    print('  Result SetFaceCounts(NodeId node_id, PartId part_id,  face_counts_array, i32 start)')
    print('  Result SetVertexList(NodeId node_id, PartId part_id,  vertex_list_array, i32 start)')
    print('  Result AddAttribute(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info)')
    print('  Result DeleteAttribute(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info)')
    print('  Result SetAttributeIntData(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info,  data_array, i32 start)')
    print('  Result SetAttributeInt64Data(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info,  data_array, i32 start)')
    print('  Result SetAttributeFloatData(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info,  data_array, i32 start)')
    print('  Result SetAttributeFloat64Data(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info,  data_array, i32 start)')
    print('  Result SetAttributeStringData(NodeId node_id, PartId part_id, string name, AttributeInfo attr_info,  data_array, i32 start)')
    print('  Result AddGroup(NodeId node_id, PartId part_id, GroupType group_type, string group_name)')
    print('  Result DeleteGroup(NodeId node_id, PartId part_id, GroupType group_type, string group_name)')
    print('  Result SetGroupMembership(NodeId node_id, PartId part_id, GroupType group_type, string group_name,  membership_array, i32 start)')
    print('  Result CommitGeo(NodeId node_id)')
    print('  Result RevertGeo(NodeId node_id)')
    print('  GetMaterialNodeIdsOnFaces_Out GetMaterialNodeIdsOnFaces(NodeId geometry_node_id, PartId part_id, i32 start, i32 length)')
    print('  GetMaterialInfo_Out GetMaterialInfo(NodeId material_node_id)')
    print('  Result RenderCOPToImage(NodeId cop_node_id)')
    print('  Result RenderTextureToImage(NodeId material_node_id, ParmId parm_id)')
    print('  GetImageInfo_Out GetImageInfo(NodeId material_node_id)')
    print('  Result SetImageInfo(NodeId material_node_id, ImageInfo image_info)')
    print('  GetImagePlaneCount_Out GetImagePlaneCount(NodeId material_node_id)')
    print('  GetImagePlanes_Out GetImagePlanes(NodeId material_node_id, i32 image_plane_count)')
    print('  ExtractImageToFile_Out ExtractImageToFile(NodeId material_node_id, string image_file_format_name, string image_planes, string destination_folder_path, string destination_file_name)')
    print('  GetImageFilePath_Out GetImageFilePath(NodeId material_node_id, string image_file_format_name, string image_planes, string destination_folder_path, string destination_file_name, ParmId texture_parm_id)')
    print('  ExtractImageToMemory_Out ExtractImageToMemory(NodeId material_node_id, string image_file_format_name, string image_planes)')
    print('  GetImageMemoryBuffer_Out GetImageMemoryBuffer(NodeId material_node_id, i32 length)')
    print('  GetSupportedImageFileFormatCount_Out GetSupportedImageFileFormatCount()')
    print('  GetSupportedImageFileFormats_Out GetSupportedImageFileFormats(i32 file_format_count)')
    print('  Result SetAnimCurve(NodeId node_id, ParmId parm_id, i32 parm_index,  curve_keyframes_array)')
    print('  Result SetTransformAnimCurve(NodeId node_id, TransformComponent trans_comp,  curve_keyframes_array)')
    print('  Result ResetSimulation(NodeId node_id)')
    print('  GetVolumeInfo_Out GetVolumeInfo(NodeId node_id, PartId part_id)')
    print('  GetFirstVolumeTile_Out GetFirstVolumeTile(NodeId node_id, PartId part_id)')
    print('  GetNextVolumeTile_Out GetNextVolumeTile(NodeId node_id, PartId part_id)')
    print('  GetVolumeVoxelFloatData_Out GetVolumeVoxelFloatData(NodeId node_id, PartId part_id, i32 x_index, i32 y_index, i32 z_index, i32 value_count)')
    print('  GetVolumeTileFloatData_Out GetVolumeTileFloatData(NodeId node_id, PartId part_id, double fill_value, VolumeTileInfo tile, i32 length)')
    print('  GetVolumeVoxelIntData_Out GetVolumeVoxelIntData(NodeId node_id, PartId part_id, i32 x_index, i32 y_index, i32 z_index, i32 value_count)')
    print('  GetVolumeTileIntData_Out GetVolumeTileIntData(NodeId node_id, PartId part_id, i32 fill_value, VolumeTileInfo tile, i32 length)')
    print('  GetHeightFieldData_Out GetHeightFieldData(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  Result SetVolumeInfo(NodeId node_id, PartId part_id, VolumeInfo volume_info)')
    print('  Result SetVolumeTileFloatData(NodeId node_id, PartId part_id, VolumeTileInfo tile,  values_array)')
    print('  Result SetVolumeTileIntData(NodeId node_id, PartId part_id, VolumeTileInfo tile,  values_array)')
    print('  Result SetVolumeVoxelFloatData(NodeId node_id, PartId part_id, i32 x_index, i32 y_index, i32 z_index,  values_array)')
    print('  Result SetVolumeVoxelIntData(NodeId node_id, PartId part_id, i32 x_index, i32 y_index, i32 z_index,  values_array)')
    print('  GetVolumeBounds_Out GetVolumeBounds(NodeId node_id, PartId part_id)')
    print('  Result SetHeightFieldData(NodeId node_id, PartId part_id, string name,  values_array, i32 start)')
    print('  GetCurveInfo_Out GetCurveInfo(NodeId node_id, PartId part_id)')
    print('  GetCurveCounts_Out GetCurveCounts(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  GetCurveOrders_Out GetCurveOrders(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  GetCurveKnots_Out GetCurveKnots(NodeId node_id, PartId part_id, i32 start, i32 length)')
    print('  Result SetCurveInfo(NodeId node_id, PartId part_id, CurveInfo info)')
    print('  Result SetCurveCounts(NodeId node_id, PartId part_id,  counts_array, i32 start)')
    print('  Result SetCurveOrders(NodeId node_id, PartId part_id,  orders_array, i32 start)')
    print('  Result SetCurveKnots(NodeId node_id, PartId part_id,  knots_array, i32 start)')
    print('  GetBoxInfo_Out GetBoxInfo(NodeId geo_node_id, PartId part_id)')
    print('  GetSphereInfo_Out GetSphereInfo(NodeId geo_node_id, PartId part_id)')
    print('  GetActiveCacheCount_Out GetActiveCacheCount()')
    print('  GetActiveCacheNames_Out GetActiveCacheNames(i32 active_cache_count)')
    print('  GetCacheProperty_Out GetCacheProperty(string cache_name, CacheProperty cache_property)')
    print('  Result SetCacheProperty(string cache_name, CacheProperty cache_property, i32 property_value)')
    print('  Result SaveGeoToFile(NodeId node_id, string file_name)')
    print('  Result LoadGeoFromFile(NodeId node_id, string file_name)')
    print('  Result SaveNodeToFile(NodeId node_id, string file_name)')
    print('  LoadNodeFromFile_Out LoadNodeFromFile(string file_name, NodeId parent_node_id, string node_label, bool cook_on_load)')
    print('  GetGeoSize_Out GetGeoSize(NodeId node_id, string format)')
    print('  SaveGeoToMemory_Out SaveGeoToMemory(NodeId node_id, i32 length)')
    print('  Result LoadGeoFromMemory(NodeId node_id, string format, string buffer, i32 length)')
    print('  Result SetNodeDisplay(NodeId node_id, i32 onOff)')
    print('  GetTotalCookCount_Out GetTotalCookCount(NodeId node_id, NodeTypeBits node_type_filter, NodeFlagsBits node_flags_filter, bool recursive)')
    print('  Result SetSessionSync(bool enable)')
    print('  GetViewport_Out GetViewport()')
    print('  Result SetViewport(Viewport viewport)')
    print('  GetSessionSyncInfo_Out GetSessionSyncInfo()')
    print('  Result SetSessionSyncInfo(SessionSyncInfo session_sync_info)')
    print('  GetPDGGraphContexts_Out GetPDGGraphContexts(i32 count)')
    print('  GetPDGGraphContextId_Out GetPDGGraphContextId(NodeId top_node_id)')
    print('  Result CookPDG(NodeId cook_node_id, i32 generate_only, i32 blocking)')
    print('  GetPDGEvents_Out GetPDGEvents(PDG_GraphContextId graph_context_id, i32 length)')
    print('  GetPDGState_Out GetPDGState(PDG_GraphContextId graph_context_id)')
    print('  CreateWorkitem_Out CreateWorkitem(NodeId node_id, string name, i32 index)')
    print('  GetWorkitemInfo_Out GetWorkitemInfo(PDG_GraphContextId graph_context_id, PDG_WorkitemId workitem_id)')
    print('  Result SetWorkitemIntData(NodeId node_id, PDG_WorkitemId workitem_id, string data_name,  values_array)')
    print('  Result SetWorkitemFloatData(NodeId node_id, PDG_WorkitemId workitem_id, string data_name,  values_array)')
    print('  Result SetWorkitemStringData(NodeId node_id, PDG_WorkitemId workitem_id, string data_name, i32 data_index, string value)')
    print('  Result CommitWorkitems(NodeId node_id)')
    print('  GetNumWorkitems_Out GetNumWorkitems(NodeId node_id)')
    print('  GetWorkitems_Out GetWorkitems(NodeId node_id, i32 length)')
    print('  GetWorkitemDataLength_Out GetWorkitemDataLength(NodeId node_id, PDG_WorkitemId workitem_id, string data_name)')
    print('  GetWorkitemIntData_Out GetWorkitemIntData(NodeId node_id, PDG_WorkitemId workitem_id, string data_name, i32 length)')
    print('  GetWorkitemFloatData_Out GetWorkitemFloatData(NodeId node_id, PDG_WorkitemId workitem_id, string data_name, i32 length)')
    print('  GetWorkitemStringData_Out GetWorkitemStringData(NodeId node_id, PDG_WorkitemId workitem_id, string data_name, i32 length)')
    print('  GetWorkitemResultInfo_Out GetWorkitemResultInfo(NodeId node_id, PDG_WorkitemId workitem_id, i32 resultinfo_count)')
    print('  Result DirtyPDGNode(NodeId node_id, bool clean_results)')
    print('  Result PausePDGCook(PDG_GraphContextId graph_context_id)')
    print('  Result CancelPDGCook(PDG_GraphContextId graph_context_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = HART.Client(protocol)
transport.open()

if cmd == 'CookNodeDefault':
    if len(args) != 1:
        print('CookNodeDefault requires 1 args')
        sys.exit(1)
    pp.pprint(client.CookNodeDefault(eval(args[0]),))

elif cmd == 'IsInitialized':
    if len(args) != 0:
        print('IsInitialized requires 0 args')
        sys.exit(1)
    pp.pprint(client.IsInitialized())

elif cmd == 'Initialize':
    if len(args) != 8:
        print('Initialize requires 8 args')
        sys.exit(1)
    pp.pprint(client.Initialize(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4], args[5], args[6], args[7],))

elif cmd == 'Cleanup':
    if len(args) != 0:
        print('Cleanup requires 0 args')
        sys.exit(1)
    pp.pprint(client.Cleanup())

elif cmd == 'GetSessionEnvInt':
    if len(args) != 1:
        print('GetSessionEnvInt requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetSessionEnvInt(eval(args[0]),))

elif cmd == 'GetServerEnvInt':
    if len(args) != 1:
        print('GetServerEnvInt requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetServerEnvInt(args[0],))

elif cmd == 'GetServerEnvString':
    if len(args) != 1:
        print('GetServerEnvString requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetServerEnvString(args[0],))

elif cmd == 'GetServerEnvVarCount':
    if len(args) != 0:
        print('GetServerEnvVarCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetServerEnvVarCount())

elif cmd == 'GetServerEnvVarList':
    if len(args) != 2:
        print('GetServerEnvVarList requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetServerEnvVarList(eval(args[0]), eval(args[1]),))

elif cmd == 'SetServerEnvInt':
    if len(args) != 2:
        print('SetServerEnvInt requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetServerEnvInt(args[0], eval(args[1]),))

elif cmd == 'SetServerEnvString':
    if len(args) != 2:
        print('SetServerEnvString requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetServerEnvString(args[0], args[1],))

elif cmd == 'GetStatus':
    if len(args) != 1:
        print('GetStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetStatus(eval(args[0]),))

elif cmd == 'GetStatusStringBufLength':
    if len(args) != 2:
        print('GetStatusStringBufLength requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetStatusStringBufLength(eval(args[0]), eval(args[1]),))

elif cmd == 'GetStatusString':
    if len(args) != 2:
        print('GetStatusString requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetStatusString(eval(args[0]), eval(args[1]),))

elif cmd == 'ComposeNodeCookResult':
    if len(args) != 2:
        print('ComposeNodeCookResult requires 2 args')
        sys.exit(1)
    pp.pprint(client.ComposeNodeCookResult(eval(args[0]), eval(args[1]),))

elif cmd == 'GetComposedNodeCookResult':
    if len(args) != 1:
        print('GetComposedNodeCookResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetComposedNodeCookResult(eval(args[0]),))

elif cmd == 'CheckForSpecificErrors':
    if len(args) != 2:
        print('CheckForSpecificErrors requires 2 args')
        sys.exit(1)
    pp.pprint(client.CheckForSpecificErrors(eval(args[0]), eval(args[1]),))

elif cmd == 'GetCookingTotalCount':
    if len(args) != 0:
        print('GetCookingTotalCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetCookingTotalCount())

elif cmd == 'GetCookingCurrentCount':
    if len(args) != 0:
        print('GetCookingCurrentCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetCookingCurrentCount())

elif cmd == 'ConvertTransform':
    if len(args) != 3:
        print('ConvertTransform requires 3 args')
        sys.exit(1)
    pp.pprint(client.ConvertTransform(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ConvertMatrixToQuat':
    if len(args) != 2:
        print('ConvertMatrixToQuat requires 2 args')
        sys.exit(1)
    pp.pprint(client.ConvertMatrixToQuat(eval(args[0]), eval(args[1]),))

elif cmd == 'ConvertMatrixToEuler':
    if len(args) != 3:
        print('ConvertMatrixToEuler requires 3 args')
        sys.exit(1)
    pp.pprint(client.ConvertMatrixToEuler(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ConvertTransformQuatToMatrix':
    if len(args) != 1:
        print('ConvertTransformQuatToMatrix requires 1 args')
        sys.exit(1)
    pp.pprint(client.ConvertTransformQuatToMatrix(eval(args[0]),))

elif cmd == 'ConvertTransformEulerToMatrix':
    if len(args) != 1:
        print('ConvertTransformEulerToMatrix requires 1 args')
        sys.exit(1)
    pp.pprint(client.ConvertTransformEulerToMatrix(eval(args[0]),))

elif cmd == 'PythonThreadInterpreterLock':
    if len(args) != 1:
        print('PythonThreadInterpreterLock requires 1 args')
        sys.exit(1)
    pp.pprint(client.PythonThreadInterpreterLock(eval(args[0]),))

elif cmd == 'GetStringBufLength':
    if len(args) != 1:
        print('GetStringBufLength requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetStringBufLength(eval(args[0]),))

elif cmd == 'GetString':
    if len(args) != 2:
        print('GetString requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetString(eval(args[0]), eval(args[1]),))

elif cmd == 'SetCustomString':
    if len(args) != 1:
        print('SetCustomString requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetCustomString(args[0],))

elif cmd == 'RemoveCustomString':
    if len(args) != 1:
        print('RemoveCustomString requires 1 args')
        sys.exit(1)
    pp.pprint(client.RemoveCustomString(eval(args[0]),))

elif cmd == 'GetStringBatchSize':
    if len(args) != 1:
        print('GetStringBatchSize requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetStringBatchSize(eval(args[0]),))

elif cmd == 'GetStringBatch':
    if len(args) != 1:
        print('GetStringBatch requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetStringBatch(eval(args[0]),))

elif cmd == 'GetTime':
    if len(args) != 0:
        print('GetTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetTime())

elif cmd == 'SetTime':
    if len(args) != 1:
        print('SetTime requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetTime(eval(args[0]),))

elif cmd == 'GetUseHoudiniTime':
    if len(args) != 0:
        print('GetUseHoudiniTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetUseHoudiniTime())

elif cmd == 'SetUseHoudiniTime':
    if len(args) != 1:
        print('SetUseHoudiniTime requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetUseHoudiniTime(eval(args[0]),))

elif cmd == 'GetTimelineOptions':
    if len(args) != 0:
        print('GetTimelineOptions requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetTimelineOptions())

elif cmd == 'SetTimelineOptions':
    if len(args) != 1:
        print('SetTimelineOptions requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetTimelineOptions(eval(args[0]),))

elif cmd == 'LoadAssetLibraryFromFile':
    if len(args) != 2:
        print('LoadAssetLibraryFromFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.LoadAssetLibraryFromFile(args[0], eval(args[1]),))

elif cmd == 'LoadAssetLibraryFromMemory':
    if len(args) != 3:
        print('LoadAssetLibraryFromMemory requires 3 args')
        sys.exit(1)
    pp.pprint(client.LoadAssetLibraryFromMemory(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'GetAvailableAssetCount':
    if len(args) != 1:
        print('GetAvailableAssetCount requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetAvailableAssetCount(eval(args[0]),))

elif cmd == 'GetAvailableAssets':
    if len(args) != 2:
        print('GetAvailableAssets requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetAvailableAssets(eval(args[0]), eval(args[1]),))

elif cmd == 'GetAssetInfo':
    if len(args) != 1:
        print('GetAssetInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetAssetInfo(eval(args[0]),))

elif cmd == 'GetAssetDefinitionParmCounts':
    if len(args) != 2:
        print('GetAssetDefinitionParmCounts requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetAssetDefinitionParmCounts(eval(args[0]), args[1],))

elif cmd == 'GetAssetDefinitionParmInfos':
    if len(args) != 4:
        print('GetAssetDefinitionParmInfos requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetAssetDefinitionParmInfos(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'GetAssetDefinitionParmValues':
    if len(args) != 11:
        print('GetAssetDefinitionParmValues requires 11 args')
        sys.exit(1)
    pp.pprint(client.GetAssetDefinitionParmValues(eval(args[0]), args[1], eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]), eval(args[10]),))

elif cmd == 'Interrupt':
    if len(args) != 0:
        print('Interrupt requires 0 args')
        sys.exit(1)
    pp.pprint(client.Interrupt())

elif cmd == 'LoadHIPFile':
    if len(args) != 2:
        print('LoadHIPFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.LoadHIPFile(args[0], eval(args[1]),))

elif cmd == 'SaveHIPFile':
    if len(args) != 2:
        print('SaveHIPFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.SaveHIPFile(args[0], eval(args[1]),))

elif cmd == 'IsNodeValid':
    if len(args) != 2:
        print('IsNodeValid requires 2 args')
        sys.exit(1)
    pp.pprint(client.IsNodeValid(eval(args[0]), eval(args[1]),))

elif cmd == 'GetNodeInfo':
    if len(args) != 1:
        print('GetNodeInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetNodeInfo(eval(args[0]),))

elif cmd == 'GetNodePath':
    if len(args) != 2:
        print('GetNodePath requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetNodePath(eval(args[0]), eval(args[1]),))

elif cmd == 'GetManagerNodeId':
    if len(args) != 1:
        print('GetManagerNodeId requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetManagerNodeId(eval(args[0]),))

elif cmd == 'ComposeChildNodeList':
    if len(args) != 4:
        print('ComposeChildNodeList requires 4 args')
        sys.exit(1)
    pp.pprint(client.ComposeChildNodeList(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetComposedChildNodeList':
    if len(args) != 2:
        print('GetComposedChildNodeList requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetComposedChildNodeList(eval(args[0]), eval(args[1]),))

elif cmd == 'CreateNode':
    if len(args) != 4:
        print('CreateNode requires 4 args')
        sys.exit(1)
    pp.pprint(client.CreateNode(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'CreateInputNode':
    if len(args) != 1:
        print('CreateInputNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateInputNode(args[0],))

elif cmd == 'CreateHeightfieldInputNode':
    if len(args) != 5:
        print('CreateHeightfieldInputNode requires 5 args')
        sys.exit(1)
    pp.pprint(client.CreateHeightfieldInputNode(eval(args[0]), args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'CreateHeightFieldInput':
    if len(args) != 6:
        print('CreateHeightFieldInput requires 6 args')
        sys.exit(1)
    pp.pprint(client.CreateHeightFieldInput(eval(args[0]), args[1], eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'CreateHeightfieldInputVolumeNode':
    if len(args) != 5:
        print('CreateHeightfieldInputVolumeNode requires 5 args')
        sys.exit(1)
    pp.pprint(client.CreateHeightfieldInputVolumeNode(eval(args[0]), args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'CookNode':
    if len(args) != 2:
        print('CookNode requires 2 args')
        sys.exit(1)
    pp.pprint(client.CookNode(eval(args[0]), eval(args[1]),))

elif cmd == 'DeleteNode':
    if len(args) != 1:
        print('DeleteNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.DeleteNode(eval(args[0]),))

elif cmd == 'RenameNode':
    if len(args) != 2:
        print('RenameNode requires 2 args')
        sys.exit(1)
    pp.pprint(client.RenameNode(eval(args[0]), args[1],))

elif cmd == 'ConnectNodeInput':
    if len(args) != 4:
        print('ConnectNodeInput requires 4 args')
        sys.exit(1)
    pp.pprint(client.ConnectNodeInput(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'DisconnectNodeInput':
    if len(args) != 2:
        print('DisconnectNodeInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.DisconnectNodeInput(eval(args[0]), eval(args[1]),))

elif cmd == 'QueryNodeInput':
    if len(args) != 2:
        print('QueryNodeInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.QueryNodeInput(eval(args[0]), eval(args[1]),))

elif cmd == 'GetNodeInputName':
    if len(args) != 2:
        print('GetNodeInputName requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetNodeInputName(eval(args[0]), eval(args[1]),))

elif cmd == 'DisconnectNodeOutputsAt':
    if len(args) != 2:
        print('DisconnectNodeOutputsAt requires 2 args')
        sys.exit(1)
    pp.pprint(client.DisconnectNodeOutputsAt(eval(args[0]), eval(args[1]),))

elif cmd == 'QueryNodeOutputConnectedCount':
    if len(args) != 4:
        print('QueryNodeOutputConnectedCount requires 4 args')
        sys.exit(1)
    pp.pprint(client.QueryNodeOutputConnectedCount(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'QueryNodeOutputConnectedNodes':
    if len(args) != 6:
        print('QueryNodeOutputConnectedNodes requires 6 args')
        sys.exit(1)
    pp.pprint(client.QueryNodeOutputConnectedNodes(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'GetNodeOutputName':
    if len(args) != 2:
        print('GetNodeOutputName requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetNodeOutputName(eval(args[0]), eval(args[1]),))

elif cmd == 'GetParameters':
    if len(args) != 3:
        print('GetParameters requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParameters(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetParmInfo':
    if len(args) != 2:
        print('GetParmInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetParmInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetParmIdFromName':
    if len(args) != 2:
        print('GetParmIdFromName requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetParmIdFromName(eval(args[0]), args[1],))

elif cmd == 'GetParmInfoFromName':
    if len(args) != 2:
        print('GetParmInfoFromName requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetParmInfoFromName(eval(args[0]), args[1],))

elif cmd == 'GetParmTagName':
    if len(args) != 3:
        print('GetParmTagName requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmTagName(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetParmTagValue':
    if len(args) != 3:
        print('GetParmTagValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmTagValue(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'ParmHasTag':
    if len(args) != 3:
        print('ParmHasTag requires 3 args')
        sys.exit(1)
    pp.pprint(client.ParmHasTag(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'ParmHasExpression':
    if len(args) != 3:
        print('ParmHasExpression requires 3 args')
        sys.exit(1)
    pp.pprint(client.ParmHasExpression(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'GetParmWithTag':
    if len(args) != 2:
        print('GetParmWithTag requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetParmWithTag(eval(args[0]), args[1],))

elif cmd == 'GetParmExpression':
    if len(args) != 3:
        print('GetParmExpression requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmExpression(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'RevertParmToDefault':
    if len(args) != 3:
        print('RevertParmToDefault requires 3 args')
        sys.exit(1)
    pp.pprint(client.RevertParmToDefault(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'RevertParmToDefaults':
    if len(args) != 2:
        print('RevertParmToDefaults requires 2 args')
        sys.exit(1)
    pp.pprint(client.RevertParmToDefaults(eval(args[0]), args[1],))

elif cmd == 'SetParmExpression':
    if len(args) != 4:
        print('SetParmExpression requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetParmExpression(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'RemoveParmExpression':
    if len(args) != 3:
        print('RemoveParmExpression requires 3 args')
        sys.exit(1)
    pp.pprint(client.RemoveParmExpression(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetParmIntValue':
    if len(args) != 3:
        print('GetParmIntValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmIntValue(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'GetParmIntValues':
    if len(args) != 3:
        print('GetParmIntValues requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmIntValues(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetParmFloatValue':
    if len(args) != 3:
        print('GetParmFloatValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmFloatValue(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'GetParmFloatValues':
    if len(args) != 3:
        print('GetParmFloatValues requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmFloatValues(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetParmStringValue':
    if len(args) != 4:
        print('GetParmStringValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetParmStringValue(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'GetParmStringValues':
    if len(args) != 4:
        print('GetParmStringValues requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetParmStringValues(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetParmNodeValue':
    if len(args) != 2:
        print('GetParmNodeValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetParmNodeValue(eval(args[0]), args[1],))

elif cmd == 'GetParmFile':
    if len(args) != 4:
        print('GetParmFile requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetParmFile(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'GetParmChoiceLists':
    if len(args) != 3:
        print('GetParmChoiceLists requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetParmChoiceLists(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'SetParmIntValue':
    if len(args) != 4:
        print('SetParmIntValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetParmIntValue(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'SetParmIntValues':
    if len(args) != 3:
        print('SetParmIntValues requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetParmIntValues(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'SetParmFloatValue':
    if len(args) != 4:
        print('SetParmFloatValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetParmFloatValue(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'SetParmFloatValues':
    if len(args) != 3:
        print('SetParmFloatValues requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetParmFloatValues(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'SetParmStringValue':
    if len(args) != 4:
        print('SetParmStringValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetParmStringValue(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'SetParmNodeValue':
    if len(args) != 3:
        print('SetParmNodeValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetParmNodeValue(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'InsertMultiparmInstance':
    if len(args) != 3:
        print('InsertMultiparmInstance requires 3 args')
        sys.exit(1)
    pp.pprint(client.InsertMultiparmInstance(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'RemoveMultiparmInstance':
    if len(args) != 3:
        print('RemoveMultiparmInstance requires 3 args')
        sys.exit(1)
    pp.pprint(client.RemoveMultiparmInstance(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetHandleInfo':
    if len(args) != 3:
        print('GetHandleInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetHandleInfo(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetHandleBindingInfo':
    if len(args) != 4:
        print('GetHandleBindingInfo requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetHandleBindingInfo(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetPresetBufLength':
    if len(args) != 3:
        print('GetPresetBufLength requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetPresetBufLength(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetPreset':
    if len(args) != 2:
        print('GetPreset requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetPreset(eval(args[0]), eval(args[1]),))

elif cmd == 'SetPreset':
    if len(args) != 5:
        print('SetPreset requires 5 args')
        sys.exit(1)
    pp.pprint(client.SetPreset(eval(args[0]), eval(args[1]), args[2], args[3], eval(args[4]),))

elif cmd == 'GetObjectInfo':
    if len(args) != 1:
        print('GetObjectInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetObjectInfo(eval(args[0]),))

elif cmd == 'GetObjectTransform':
    if len(args) != 3:
        print('GetObjectTransform requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetObjectTransform(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ComposeObjectList':
    if len(args) != 2:
        print('ComposeObjectList requires 2 args')
        sys.exit(1)
    pp.pprint(client.ComposeObjectList(eval(args[0]), args[1],))

elif cmd == 'GetComposedObjectList':
    if len(args) != 3:
        print('GetComposedObjectList requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetComposedObjectList(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetComposedObjectTransforms':
    if len(args) != 4:
        print('GetComposedObjectTransforms requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetComposedObjectTransforms(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetInstancedObjectIds':
    if len(args) != 3:
        print('GetInstancedObjectIds requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetInstancedObjectIds(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetInstanceTransforms':
    if len(args) != 4:
        print('GetInstanceTransforms requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetInstanceTransforms(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetInstanceTransformsOnPart':
    if len(args) != 5:
        print('GetInstanceTransformsOnPart requires 5 args')
        sys.exit(1)
    pp.pprint(client.GetInstanceTransformsOnPart(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'SetObjectTransform':
    if len(args) != 2:
        print('SetObjectTransform requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetObjectTransform(eval(args[0]), eval(args[1]),))

elif cmd == 'GetDisplayGeoInfo':
    if len(args) != 1:
        print('GetDisplayGeoInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetDisplayGeoInfo(eval(args[0]),))

elif cmd == 'GetGeoInfo':
    if len(args) != 1:
        print('GetGeoInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetGeoInfo(eval(args[0]),))

elif cmd == 'GetPartInfo':
    if len(args) != 2:
        print('GetPartInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetPartInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetFaceCounts':
    if len(args) != 4:
        print('GetFaceCounts requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetFaceCounts(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetVertexList':
    if len(args) != 4:
        print('GetVertexList requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetVertexList(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetAttributeInfo':
    if len(args) != 4:
        print('GetAttributeInfo requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeInfo(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'GetAttributeNames':
    if len(args) != 4:
        print('GetAttributeNames requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeNames(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetAttributeIntData':
    if len(args) != 7:
        print('GetAttributeIntData requires 7 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeIntData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'GetAttributeInt64Data':
    if len(args) != 7:
        print('GetAttributeInt64Data requires 7 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeInt64Data(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'GetAttributeFloatData':
    if len(args) != 7:
        print('GetAttributeFloatData requires 7 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeFloatData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'GetAttributeFloat64Data':
    if len(args) != 7:
        print('GetAttributeFloat64Data requires 7 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeFloat64Data(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'GetAttributeStringData':
    if len(args) != 6:
        print('GetAttributeStringData requires 6 args')
        sys.exit(1)
    pp.pprint(client.GetAttributeStringData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'GetGroupNames':
    if len(args) != 3:
        print('GetGroupNames requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetGroupNames(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetGroupMembership':
    if len(args) != 6:
        print('GetGroupMembership requires 6 args')
        sys.exit(1)
    pp.pprint(client.GetGroupMembership(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]), eval(args[5]),))

elif cmd == 'GetGroupCountOnPackedInstancePart':
    if len(args) != 2:
        print('GetGroupCountOnPackedInstancePart requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetGroupCountOnPackedInstancePart(eval(args[0]), eval(args[1]),))

elif cmd == 'GetGroupNamesOnPackedInstancePart':
    if len(args) != 4:
        print('GetGroupNamesOnPackedInstancePart requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetGroupNamesOnPackedInstancePart(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetGroupMembershipOnPackedInstancePart':
    if len(args) != 6:
        print('GetGroupMembershipOnPackedInstancePart requires 6 args')
        sys.exit(1)
    pp.pprint(client.GetGroupMembershipOnPackedInstancePart(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]), eval(args[5]),))

elif cmd == 'GetInstancedPartIds':
    if len(args) != 4:
        print('GetInstancedPartIds requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetInstancedPartIds(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetInstancerPartTransforms':
    if len(args) != 5:
        print('GetInstancerPartTransforms requires 5 args')
        sys.exit(1)
    pp.pprint(client.GetInstancerPartTransforms(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'SetPartInfo':
    if len(args) != 3:
        print('SetPartInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetPartInfo(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'SetFaceCounts':
    if len(args) != 4:
        print('SetFaceCounts requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetFaceCounts(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetVertexList':
    if len(args) != 4:
        print('SetVertexList requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetVertexList(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'AddAttribute':
    if len(args) != 4:
        print('AddAttribute requires 4 args')
        sys.exit(1)
    pp.pprint(client.AddAttribute(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'DeleteAttribute':
    if len(args) != 4:
        print('DeleteAttribute requires 4 args')
        sys.exit(1)
    pp.pprint(client.DeleteAttribute(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'SetAttributeIntData':
    if len(args) != 6:
        print('SetAttributeIntData requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetAttributeIntData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'SetAttributeInt64Data':
    if len(args) != 6:
        print('SetAttributeInt64Data requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetAttributeInt64Data(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'SetAttributeFloatData':
    if len(args) != 6:
        print('SetAttributeFloatData requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetAttributeFloatData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'SetAttributeFloat64Data':
    if len(args) != 6:
        print('SetAttributeFloat64Data requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetAttributeFloat64Data(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'SetAttributeStringData':
    if len(args) != 6:
        print('SetAttributeStringData requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetAttributeStringData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'AddGroup':
    if len(args) != 4:
        print('AddGroup requires 4 args')
        sys.exit(1)
    pp.pprint(client.AddGroup(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'DeleteGroup':
    if len(args) != 4:
        print('DeleteGroup requires 4 args')
        sys.exit(1)
    pp.pprint(client.DeleteGroup(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'SetGroupMembership':
    if len(args) != 6:
        print('SetGroupMembership requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetGroupMembership(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]), eval(args[5]),))

elif cmd == 'CommitGeo':
    if len(args) != 1:
        print('CommitGeo requires 1 args')
        sys.exit(1)
    pp.pprint(client.CommitGeo(eval(args[0]),))

elif cmd == 'RevertGeo':
    if len(args) != 1:
        print('RevertGeo requires 1 args')
        sys.exit(1)
    pp.pprint(client.RevertGeo(eval(args[0]),))

elif cmd == 'GetMaterialNodeIdsOnFaces':
    if len(args) != 4:
        print('GetMaterialNodeIdsOnFaces requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetMaterialNodeIdsOnFaces(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetMaterialInfo':
    if len(args) != 1:
        print('GetMaterialInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetMaterialInfo(eval(args[0]),))

elif cmd == 'RenderCOPToImage':
    if len(args) != 1:
        print('RenderCOPToImage requires 1 args')
        sys.exit(1)
    pp.pprint(client.RenderCOPToImage(eval(args[0]),))

elif cmd == 'RenderTextureToImage':
    if len(args) != 2:
        print('RenderTextureToImage requires 2 args')
        sys.exit(1)
    pp.pprint(client.RenderTextureToImage(eval(args[0]), eval(args[1]),))

elif cmd == 'GetImageInfo':
    if len(args) != 1:
        print('GetImageInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetImageInfo(eval(args[0]),))

elif cmd == 'SetImageInfo':
    if len(args) != 2:
        print('SetImageInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetImageInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetImagePlaneCount':
    if len(args) != 1:
        print('GetImagePlaneCount requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetImagePlaneCount(eval(args[0]),))

elif cmd == 'GetImagePlanes':
    if len(args) != 2:
        print('GetImagePlanes requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetImagePlanes(eval(args[0]), eval(args[1]),))

elif cmd == 'ExtractImageToFile':
    if len(args) != 5:
        print('ExtractImageToFile requires 5 args')
        sys.exit(1)
    pp.pprint(client.ExtractImageToFile(eval(args[0]), args[1], args[2], args[3], args[4],))

elif cmd == 'GetImageFilePath':
    if len(args) != 6:
        print('GetImageFilePath requires 6 args')
        sys.exit(1)
    pp.pprint(client.GetImageFilePath(eval(args[0]), args[1], args[2], args[3], args[4], eval(args[5]),))

elif cmd == 'ExtractImageToMemory':
    if len(args) != 3:
        print('ExtractImageToMemory requires 3 args')
        sys.exit(1)
    pp.pprint(client.ExtractImageToMemory(eval(args[0]), args[1], args[2],))

elif cmd == 'GetImageMemoryBuffer':
    if len(args) != 2:
        print('GetImageMemoryBuffer requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetImageMemoryBuffer(eval(args[0]), eval(args[1]),))

elif cmd == 'GetSupportedImageFileFormatCount':
    if len(args) != 0:
        print('GetSupportedImageFileFormatCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetSupportedImageFileFormatCount())

elif cmd == 'GetSupportedImageFileFormats':
    if len(args) != 1:
        print('GetSupportedImageFileFormats requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetSupportedImageFileFormats(eval(args[0]),))

elif cmd == 'SetAnimCurve':
    if len(args) != 4:
        print('SetAnimCurve requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetAnimCurve(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetTransformAnimCurve':
    if len(args) != 3:
        print('SetTransformAnimCurve requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetTransformAnimCurve(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ResetSimulation':
    if len(args) != 1:
        print('ResetSimulation requires 1 args')
        sys.exit(1)
    pp.pprint(client.ResetSimulation(eval(args[0]),))

elif cmd == 'GetVolumeInfo':
    if len(args) != 2:
        print('GetVolumeInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetFirstVolumeTile':
    if len(args) != 2:
        print('GetFirstVolumeTile requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetFirstVolumeTile(eval(args[0]), eval(args[1]),))

elif cmd == 'GetNextVolumeTile':
    if len(args) != 2:
        print('GetNextVolumeTile requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetNextVolumeTile(eval(args[0]), eval(args[1]),))

elif cmd == 'GetVolumeVoxelFloatData':
    if len(args) != 6:
        print('GetVolumeVoxelFloatData requires 6 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeVoxelFloatData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'GetVolumeTileFloatData':
    if len(args) != 5:
        print('GetVolumeTileFloatData requires 5 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeTileFloatData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'GetVolumeVoxelIntData':
    if len(args) != 6:
        print('GetVolumeVoxelIntData requires 6 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeVoxelIntData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'GetVolumeTileIntData':
    if len(args) != 5:
        print('GetVolumeTileIntData requires 5 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeTileIntData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'GetHeightFieldData':
    if len(args) != 4:
        print('GetHeightFieldData requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetHeightFieldData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetVolumeInfo':
    if len(args) != 3:
        print('SetVolumeInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetVolumeInfo(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'SetVolumeTileFloatData':
    if len(args) != 4:
        print('SetVolumeTileFloatData requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetVolumeTileFloatData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetVolumeTileIntData':
    if len(args) != 4:
        print('SetVolumeTileIntData requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetVolumeTileIntData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetVolumeVoxelFloatData':
    if len(args) != 6:
        print('SetVolumeVoxelFloatData requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetVolumeVoxelFloatData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'SetVolumeVoxelIntData':
    if len(args) != 6:
        print('SetVolumeVoxelIntData requires 6 args')
        sys.exit(1)
    pp.pprint(client.SetVolumeVoxelIntData(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'GetVolumeBounds':
    if len(args) != 2:
        print('GetVolumeBounds requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetVolumeBounds(eval(args[0]), eval(args[1]),))

elif cmd == 'SetHeightFieldData':
    if len(args) != 5:
        print('SetHeightFieldData requires 5 args')
        sys.exit(1)
    pp.pprint(client.SetHeightFieldData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'GetCurveInfo':
    if len(args) != 2:
        print('GetCurveInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetCurveInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetCurveCounts':
    if len(args) != 4:
        print('GetCurveCounts requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetCurveCounts(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetCurveOrders':
    if len(args) != 4:
        print('GetCurveOrders requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetCurveOrders(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetCurveKnots':
    if len(args) != 4:
        print('GetCurveKnots requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetCurveKnots(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetCurveInfo':
    if len(args) != 3:
        print('SetCurveInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetCurveInfo(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'SetCurveCounts':
    if len(args) != 4:
        print('SetCurveCounts requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetCurveCounts(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetCurveOrders':
    if len(args) != 4:
        print('SetCurveOrders requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetCurveOrders(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetCurveKnots':
    if len(args) != 4:
        print('SetCurveKnots requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetCurveKnots(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetBoxInfo':
    if len(args) != 2:
        print('GetBoxInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetBoxInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetSphereInfo':
    if len(args) != 2:
        print('GetSphereInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetSphereInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'GetActiveCacheCount':
    if len(args) != 0:
        print('GetActiveCacheCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetActiveCacheCount())

elif cmd == 'GetActiveCacheNames':
    if len(args) != 1:
        print('GetActiveCacheNames requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetActiveCacheNames(eval(args[0]),))

elif cmd == 'GetCacheProperty':
    if len(args) != 2:
        print('GetCacheProperty requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetCacheProperty(args[0], eval(args[1]),))

elif cmd == 'SetCacheProperty':
    if len(args) != 3:
        print('SetCacheProperty requires 3 args')
        sys.exit(1)
    pp.pprint(client.SetCacheProperty(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'SaveGeoToFile':
    if len(args) != 2:
        print('SaveGeoToFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.SaveGeoToFile(eval(args[0]), args[1],))

elif cmd == 'LoadGeoFromFile':
    if len(args) != 2:
        print('LoadGeoFromFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.LoadGeoFromFile(eval(args[0]), args[1],))

elif cmd == 'SaveNodeToFile':
    if len(args) != 2:
        print('SaveNodeToFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.SaveNodeToFile(eval(args[0]), args[1],))

elif cmd == 'LoadNodeFromFile':
    if len(args) != 4:
        print('LoadNodeFromFile requires 4 args')
        sys.exit(1)
    pp.pprint(client.LoadNodeFromFile(args[0], eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'GetGeoSize':
    if len(args) != 2:
        print('GetGeoSize requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetGeoSize(eval(args[0]), args[1],))

elif cmd == 'SaveGeoToMemory':
    if len(args) != 2:
        print('SaveGeoToMemory requires 2 args')
        sys.exit(1)
    pp.pprint(client.SaveGeoToMemory(eval(args[0]), eval(args[1]),))

elif cmd == 'LoadGeoFromMemory':
    if len(args) != 4:
        print('LoadGeoFromMemory requires 4 args')
        sys.exit(1)
    pp.pprint(client.LoadGeoFromMemory(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'SetNodeDisplay':
    if len(args) != 2:
        print('SetNodeDisplay requires 2 args')
        sys.exit(1)
    pp.pprint(client.SetNodeDisplay(eval(args[0]), eval(args[1]),))

elif cmd == 'GetTotalCookCount':
    if len(args) != 4:
        print('GetTotalCookCount requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetTotalCookCount(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'SetSessionSync':
    if len(args) != 1:
        print('SetSessionSync requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetSessionSync(eval(args[0]),))

elif cmd == 'GetViewport':
    if len(args) != 0:
        print('GetViewport requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetViewport())

elif cmd == 'SetViewport':
    if len(args) != 1:
        print('SetViewport requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetViewport(eval(args[0]),))

elif cmd == 'GetSessionSyncInfo':
    if len(args) != 0:
        print('GetSessionSyncInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetSessionSyncInfo())

elif cmd == 'SetSessionSyncInfo':
    if len(args) != 1:
        print('SetSessionSyncInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.SetSessionSyncInfo(eval(args[0]),))

elif cmd == 'GetPDGGraphContexts':
    if len(args) != 1:
        print('GetPDGGraphContexts requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPDGGraphContexts(eval(args[0]),))

elif cmd == 'GetPDGGraphContextId':
    if len(args) != 1:
        print('GetPDGGraphContextId requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPDGGraphContextId(eval(args[0]),))

elif cmd == 'CookPDG':
    if len(args) != 3:
        print('CookPDG requires 3 args')
        sys.exit(1)
    pp.pprint(client.CookPDG(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'GetPDGEvents':
    if len(args) != 2:
        print('GetPDGEvents requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetPDGEvents(eval(args[0]), eval(args[1]),))

elif cmd == 'GetPDGState':
    if len(args) != 1:
        print('GetPDGState requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetPDGState(eval(args[0]),))

elif cmd == 'CreateWorkitem':
    if len(args) != 3:
        print('CreateWorkitem requires 3 args')
        sys.exit(1)
    pp.pprint(client.CreateWorkitem(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'GetWorkitemInfo':
    if len(args) != 2:
        print('GetWorkitemInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitemInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'SetWorkitemIntData':
    if len(args) != 4:
        print('SetWorkitemIntData requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetWorkitemIntData(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'SetWorkitemFloatData':
    if len(args) != 4:
        print('SetWorkitemFloatData requires 4 args')
        sys.exit(1)
    pp.pprint(client.SetWorkitemFloatData(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'SetWorkitemStringData':
    if len(args) != 5:
        print('SetWorkitemStringData requires 5 args')
        sys.exit(1)
    pp.pprint(client.SetWorkitemStringData(eval(args[0]), eval(args[1]), args[2], eval(args[3]), args[4],))

elif cmd == 'CommitWorkitems':
    if len(args) != 1:
        print('CommitWorkitems requires 1 args')
        sys.exit(1)
    pp.pprint(client.CommitWorkitems(eval(args[0]),))

elif cmd == 'GetNumWorkitems':
    if len(args) != 1:
        print('GetNumWorkitems requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetNumWorkitems(eval(args[0]),))

elif cmd == 'GetWorkitems':
    if len(args) != 2:
        print('GetWorkitems requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitems(eval(args[0]), eval(args[1]),))

elif cmd == 'GetWorkitemDataLength':
    if len(args) != 3:
        print('GetWorkitemDataLength requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitemDataLength(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetWorkitemIntData':
    if len(args) != 4:
        print('GetWorkitemIntData requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitemIntData(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'GetWorkitemFloatData':
    if len(args) != 4:
        print('GetWorkitemFloatData requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitemFloatData(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'GetWorkitemStringData':
    if len(args) != 4:
        print('GetWorkitemStringData requires 4 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitemStringData(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'GetWorkitemResultInfo':
    if len(args) != 3:
        print('GetWorkitemResultInfo requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetWorkitemResultInfo(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'DirtyPDGNode':
    if len(args) != 2:
        print('DirtyPDGNode requires 2 args')
        sys.exit(1)
    pp.pprint(client.DirtyPDGNode(eval(args[0]), eval(args[1]),))

elif cmd == 'PausePDGCook':
    if len(args) != 1:
        print('PausePDGCook requires 1 args')
        sys.exit(1)
    pp.pprint(client.PausePDGCook(eval(args[0]),))

elif cmd == 'CancelPDGCook':
    if len(args) != 1:
        print('CancelPDGCook requires 1 args')
        sys.exit(1)
    pp.pprint(client.CancelPDGCook(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
